use openact::actions::DefaultRouter;
use openact::engine::TaskHandler;
use serde_json::json;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üîç ÊµãËØï GitHub ‰ª§Áâå‰∫§Êç¢ HTTP ËØ∑Ê±Ç");
    println!("==================================");

    // Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè
    let client_id = std::env::var("GITHUB_CLIENT_ID")
        .map_err(|_| "ËØ∑ËÆæÁΩÆ GITHUB_CLIENT_ID ÁéØÂ¢ÉÂèòÈáè")?;
    let client_secret = std::env::var("GITHUB_CLIENT_SECRET")
        .map_err(|_| "ËØ∑ËÆæÁΩÆ GITHUB_CLIENT_SECRET ÁéØÂ¢ÉÂèòÈáè")?;

    println!("‚úÖ ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•ÈÄöËøá");

    // ÂàõÂª∫Ë∑ØÁî±Âô®
    let router = DefaultRouter;

    // Ê®°Êãü GitHub ‰ª§Áâå‰∫§Êç¢ HTTP ËØ∑Ê±Ç
    let mock_context = json!({
        "method": "POST",
        "url": "https://github.com/login/oauth/access_token",
        "headers": {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json"
        },
        "body": {
            "grant_type": "authorization_code",
            "client_id": client_id,
            "client_secret": client_secret,
            "redirect_uri": "http://localhost:8080/oauth/callback",
            "code": "mock_auth_code_12345",
            "code_verifier": "mock_code_verifier"
        }
    });

    println!("üîß Ê®°Êãü GitHub ‰ª§Áâå‰∫§Êç¢ HTTP ËØ∑Ê±Ç...");
    println!("üìã ËØ∑Ê±Ç‰∏ä‰∏ãÊñá:");
    println!("{}", serde_json::to_string_pretty(&mock_context)?);

    // ÊâßË°å HTTP ËØ∑Ê±Ç
    match router.execute("http.request", "TestGitHubToken", &mock_context) {
        Ok(result) => {
            println!("‚úÖ HTTP ËØ∑Ê±ÇÊàêÂäüÔºÅ");
            println!("üìã ÂìçÂ∫îÁªìÊûú:");
            println!("{}", serde_json::to_string_pretty(&result)?);
            
            // Ê£ÄÊü•ÂìçÂ∫îÁªìÊûÑ
            if let Some(body) = result.get("body") {
                println!("\nüîç ÂìçÂ∫î‰ΩìÂàÜÊûê:");
                println!("   body Á±ªÂûã: {:?}", body);
                
                // Ê£ÄÊü•ÊòØÂê¶ÊòØÂ≠óÁ¨¶‰∏≤ÔºàË°®ÂçïÊ†ºÂºèÔºâ
                if let Some(body_str) = body.as_str() {
                    println!("   body ÊòØÂ≠óÁ¨¶‰∏≤: {}", body_str);
                    println!("   üìù GitHub ËøîÂõûÁöÑÊòØË°®ÂçïÊ†ºÂºèÔºåÈúÄË¶ÅËß£Êûê");
                } else if let Some(body_obj) = body.as_object() {
                    println!("   body ÊòØÂØπË±°:");
                    for (key, value) in body_obj {
                        println!("     {}: {:?}", key, value);
                    }
                } else {
                    println!("   body ÊòØÂÖ∂‰ªñÁ±ªÂûã: {:?}", body);
                }
            } else {
                println!("‚ùå ÂìçÂ∫î‰∏≠Ê≤°Êúâ body Â≠óÊÆµ");
            }
        }
        Err(e) => {
            println!("‚ùå HTTP ËØ∑Ê±ÇÂ§±Ë¥•: {}", e);
        }
    }

    Ok(())
}
