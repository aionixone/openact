# OpenAct Config Spec (YAML)

# Top-level manifest
version: "1.0"            # required
metadata: {}               # optional key-value map

# Flat connections catalog (aka sources)
connections:
  # Connection name (unique)
  <connection_name>:
    kind: <connector>      # required: http | postgres | mysql | redis | bigtable | ...
    description: "..."     # optional

    # Style A (flattened syntax, recommended for authoring)
    # HTTP example fields (others by connector kind)
    # base_url: "https://api.example.com"
    # authorization: "api_key|basic|oauth2|none"
    # auth_parameters: { ... }
    # timeout_seconds: 30

    # Style B (explicit config wrapper) - loader normalizes both styles into config
    # config:
    #   base_url: "https://api.example.com"
    #   authorization: "api_key"
    #   auth_parameters: { ... }


# Flat actions catalog (aka tools)
actions:
  # Action/tool name (used as default MCP tool name/alias)
  <tool_name>:
    # Action kind may be omitted; if omitted, it inherits the referenced connection's kind.
    # On normalization/export, the system will always materialize an explicit kind.
    kind: <connector>      # optional for authoring, required after normalization

    # Reference to a defined connection
    connection: <connection_name>    # required

    description: "..."     # optional
    metadata: {}           # optional

    # Strongly-typed input parameters (drives validation and MCP inputSchema generation)
    parameters:            # optional
      - name: <param_name>
        type: string|number|boolean|object|array
        required: true|false
        default: <any>     # optional
        schema: {}         # optional, JSON Schema for complex structures

    # Connector-specific execution config (HTTP/SQL/Redis/...) kept inside config
    config:
      # http example fields:
      # method: "GET|POST|PUT|PATCH|DELETE"
      # path: "/resource/{id}"
      # headers: { }
      # query: { }
      # body: { } | "raw-string"
      # timeout_seconds: 30

      # postgres/mysql example:
      # statement: |
      #   SELECT * FROM table WHERE id = $1;   # postgres uses $1..$N, mysql uses ?

      # redis example:
      # command: ["GET", "{{key}}"]          # template placeholders map from parameters

    # MCP exposure and overrides
    mcp:                    # optional
      enabled: true|false
      tool_name: <alias>    # optional; overrides action key in tools/list
      description: "..."     # optional; overrides description
      input_schema: {}      # optional; overrides schema derived from parameters


# Normalization & validation rules (comments):
# - Kind inheritance: actions[].kind may be omitted; loader infers from actions[].connection.kind.
#   After loading, an explicit kind is always stored (in-memory/DB) and exported.
# - Kind compatibility: actions[].kind must be compatible with the referenced connection.kind (same family).
# - Style normalization: connections accept flattened fields or config wrapper; loader normalizes to config.
#   actions export use config wrapper for execution details.
# - Env vars: ${VAR_NAME} are resolved at load/import.
# - Names: action keys are globally unique; used as default MCP tool names/aliases and for governance filters.

# HTTP-only merge semantics (comments):
# - Precedence (low → high): connection.config < action.config < call input
# - Shallow-merge maps: headers, query, cookies (one level). Higher layer overwrites keys in lower layer.
#   Deletion: set key: null at higher layer to remove it from the merged result.
# - Whole-object replace: body, authorization/auth_parameters, timeout/retry/policy.
# - Base URL & routing: base_url only from connection; method/path only from action (and call input path vars).
# - GET/HEAD: request body is ignored (warning emitted). Other methods send body with Content-Type rules:
#     explicit Content-Type honored; otherwise infer (object/array → application/json, string → text/plain).

# Parameters (comments):
# - May be defined on both connection and action; merged by name (action overrides). Used for validation & MCP inputSchema.
# - mcp.input_schema may override the derived schema when provided.

# Input mapping (comments):
# - Recognized input keys: query, headers, body, path, and template variables.
# - Path templating: /users/{id} is filled from input.path.id or by name; missing required vars cause validation errors.

# Export style (comments):
# - Connections: flattened style by default (or configurable). Actions: config wrapper; explicit kind always present.


